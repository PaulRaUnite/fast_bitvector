open! Expect_test_helpers_core
open! Sexplib0.Sexp_conv

let%expect_test "Basic" =
  let a, b = Fast_bitvector.create ~len:100, Fast_bitvector.create ~len:100 in
  print_s [%message "" (a : Fast_bitvector.t) (b : Fast_bitvector.t)];
  [%expect {|
    ((a (
       B0L
       0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
     (b (
       B0L
       0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
    |}];
  Fast_bitvector.set a 0;
  print_s [%message "" (a : Fast_bitvector.t)];
  [%expect {|
    (a (
      B0L
      0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001))
    |}];
  Fast_bitvector.set a 99;
  print_s [%message "" (a : Fast_bitvector.t)];
  [%expect {|
    (a (
      B0L
      1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001))
    |}];
  Fast_bitvector.not ~result:b a |> ignore;
  print_s [%message "" (a : Fast_bitvector.t) (b : Fast_bitvector.t)];
  [%expect {|
    ((a (
       B0L
       1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001))
     (b (
       B0L
       0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110)))
    |}];
  Fast_bitvector.set_all a;
  Fast_bitvector.clear_all b;
  print_s [%message "" (a : Fast_bitvector.t) (b : Fast_bitvector.t)
      (Fast_bitvector.is_empty a : bool) (Fast_bitvector.is_empty b : bool)
      (Fast_bitvector.is_full a : bool) (Fast_bitvector.is_full b : bool)
  ];
  [%expect {|
    ((a (
       B0L
       1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111))
     (b (
       B0L
       0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
     ("Fast_bitvector.is_empty a" false)
     ("Fast_bitvector.is_empty b" true)
     ("Fast_bitvector.is_full a"  true)
     ("Fast_bitvector.is_full b"  false))
    |}];
  Fast_bitvector.set_to a 0 false;
  Fast_bitvector.set_to b 0 true;
  print_s [%message "" (a : Fast_bitvector.t) (b : Fast_bitvector.t)];
  [%expect {|
    ((a (
       B0L
       1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110))
     (b (
       B0L
       0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
    |}];

  ()

let%expect_test "Popcount" =
  let a = Fast_bitvector.create ~len:100 in
  let pop = Fast_bitvector.popcount a in
  print_s [%message "" (a : Fast_bitvector.t) (pop : int)];
  [%expect {|
    ((a (
       B0L
       0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
     (pop 0))
    |}];
  Fast_bitvector.set_all a;
  let pop = Fast_bitvector.popcount a in
  print_s [%message "" (a : Fast_bitvector.t) (pop : int)];
  [%expect {|
    ((a (
       B0L
       1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111))
     (pop 100))
    |}]

let%expect_test "Append" =
  let a100, b100 = Fast_bitvector.create ~len:100, Fast_bitvector.create ~len:100 in
  Fast_bitvector.set_all a100;
  let c = Fast_bitvector.append a100 b100 in
  print_s [%message "" (a100 : Fast_bitvector.t) (b100 : Fast_bitvector.t) (c : Fast_bitvector.t)];
  [%expect {|
    ((a100 (
       B0L
       1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111))
     (b100 (
       B0L
       0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
     (c (
       B0L
       00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111)))
    |}]

let%expect_test "Extend" =
  let empty = Fast_bitvector.create ~len:0 in
  let empty_ten = Fast_bitvector.extend empty ~by:10 in
  print_s
    [%message
      ""
        (Fast_bitvector.is_empty empty : bool)
        (Fast_bitvector.is_empty empty_ten : bool)];
  [%expect
    {|
      (("Fast_bitvector.is_empty empty"     true)
       ("Fast_bitvector.is_empty empty_ten" true))
    |}];
  let a = Fast_bitvector.create_full ~len:10 in
  let b = Fast_bitvector.extend a ~by:6 in
  print_s [%message "" (a : Fast_bitvector.t) (b : Fast_bitvector.t)];
  [%expect
    {|
    ((a (B0L 1111111111))
     (b (B0L 0000001111111111)))
    |}];
  let a = Fast_bitvector.create_full ~len:65 in
  let b = Fast_bitvector.extend a ~by:1 in
  print_s [%message "" (a : Fast_bitvector.t) (b : Fast_bitvector.t)];
  [%expect
    {|
    ((a (B0L 11111111111111111111111111111111111111111111111111111111111111111))
     (b (B0L 011111111111111111111111111111111111111111111111111111111111111111)))
    |}];
  let a = Fast_bitvector.create_full ~len:10 in
  let b = Fast_bitvector.extend_inplace a ~by:6 in
  print_s [%message "" (a : Fast_bitvector.t) (b : Fast_bitvector.t)];
  [%expect
    {|
    ((a (B0L 0000001111111111))
     (b (B0L 0000001111111111)))
    |}]

let init_mixed ?(len=10)() =
  let f () = Fast_bitvector.create ~len in
  let a0, a1, a2, a3 = f (), f (), f (), f () in
  let b0, b1, b2, b3 = f (), f (), f (), f () in
  let c = Fast_bitvector.create ~len:(4 * len) in
  Fast_bitvector.set_all a2;
  Fast_bitvector.set_all a3;
  Fast_bitvector.set_all b1;
  Fast_bitvector.set_all b3;
  let a = Fast_bitvector.append a0 (Fast_bitvector.append a1 (Fast_bitvector.append a2 a3)) in
  let b = Fast_bitvector.append b0 (Fast_bitvector.append b1 (Fast_bitvector.append b2 b3)) in
  a, b, c

let%expect_test "Logical" = 
  let a, b, c = init_mixed () in
  let _ = Fast_bitvector.and_ ~result:c a b in
  print_s [%message "and" (a : Fast_bitvector.t) (b : Fast_bitvector.t) (c : Fast_bitvector.t)
  ];
  [%expect {|
    (and
      (a (B0L 1111111111111111111100000000000000000000))
      (b (B0L 1111111111000000000011111111110000000000))
      (c (B0L 1111111111000000000000000000000000000000)))
    |}];
  let _ = Fast_bitvector.or_ ~result:c a b in
  print_s [%message "or" (a : Fast_bitvector.t) (b : Fast_bitvector.t) (c : Fast_bitvector.t)
  ];
  [%expect {|
    (or
      (a (B0L 1111111111111111111100000000000000000000))
      (b (B0L 1111111111000000000011111111110000000000))
      (c (B0L 1111111111111111111111111111110000000000)))
    |}];
  let _ = Fast_bitvector.xor ~result:c a b in
  print_s [%message "xor" (a : Fast_bitvector.t) (b : Fast_bitvector.t) (c : Fast_bitvector.t)
  ];
  [%expect {|
    (xor
      (a (B0L 1111111111111111111100000000000000000000))
      (b (B0L 1111111111000000000011111111110000000000))
      (c (B0L 0000000000111111111111111111110000000000)))
    |}]


let%expect_test "Conversion roundtrips" =
  let a, b, _ = init_mixed () in
  let a_iter =
    a |> (fun t f -> Fast_bitvector.iter ~f t) |> Fast_bitvector.of_iter
  in
  let a_seq = a |> Fast_bitvector.to_seq |> Fast_bitvector.of_seq in
  let b_iter =
    b |> (fun t f -> Fast_bitvector.iter ~f t) |> Fast_bitvector.of_iter
  in
  let b_seq = b |> Fast_bitvector.to_seq |> Fast_bitvector.of_seq in
  print_s
    [%message
      "" (Fast_bitvector.equal a a_iter : bool) (Fast_bitvector.equal a a_seq : bool)
      (Fast_bitvector.equal b b_iter : bool) (Fast_bitvector.equal b b_seq : bool)
      (a : Fast_bitvector.t) (a_iter : Fast_bitvector.t) (a_seq : Fast_bitvector.t)
      (b : Fast_bitvector.t) (b_iter : Fast_bitvector.t) (b_seq : Fast_bitvector.t)
    ];
  [%expect
    {|
    (("Fast_bitvector.equal a a_iter" true)
     ("Fast_bitvector.equal a a_seq"  true)
     ("Fast_bitvector.equal b b_iter" true)
     ("Fast_bitvector.equal b b_seq"  true)
     (a      (B0L 1111111111111111111100000000000000000000))
     (a_iter (B0L 1111111111111111111100000000000000000000))
     (a_seq  (B0L 1111111111111111111100000000000000000000))
     (b      (B0L 1111111111000000000011111111110000000000))
     (b_iter (B0L 1111111111000000000011111111110000000000))
     (b_seq  (B0L 1111111111000000000011111111110000000000)))
    |}]

let%expect_test "Conversion roundtrips (long)" =
  let a, b, _ = init_mixed ~len:65 () in
  let a_iter =
    a |> (fun t f -> Fast_bitvector.iter ~f t) |> Fast_bitvector.of_iter
  in
  let a_seq = a |> Fast_bitvector.to_seq |> Fast_bitvector.of_seq in
  let b_iter =
    b |> (fun t f -> Fast_bitvector.iter ~f t) |> Fast_bitvector.of_iter
  in
  let b_seq = b |> Fast_bitvector.to_seq |> Fast_bitvector.of_seq in
  print_s
    [%message
      "" (Fast_bitvector.equal a a_iter : bool) (Fast_bitvector.equal a a_seq : bool)
      (Fast_bitvector.equal b b_iter : bool) (Fast_bitvector.equal b b_seq : bool)
      (a : Fast_bitvector.t) (a_iter : Fast_bitvector.t) (a_seq : Fast_bitvector.t)
      (b : Fast_bitvector.t) (b_iter : Fast_bitvector.t) (b_seq : Fast_bitvector.t)
    ];
  [%expect {|
    (("Fast_bitvector.equal a a_iter" true)
     ("Fast_bitvector.equal a a_seq"  true)
     ("Fast_bitvector.equal b b_iter" true)
     ("Fast_bitvector.equal b b_seq"  true)
     (a (
       B0L
       11111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
     (a_iter (
       B0L
       11111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
     (a_seq (
       B0L
       11111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
     (b (
       B0L
       00000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000))
     (b_iter (
       B0L
       00000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000))
     (b_seq (
       B0L
       00000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000)))
    |}]

let%expect_test "builder" =
  let t = Fast_bitvector.Builder.create () in
  Fast_bitvector.Builder.push t true;
  print_s [%message "" (Fast_bitvector.Builder.to_bitvector t : Fast_bitvector.t)];
  [%expect {| ("Fast_bitvector.Builder.to_bitvector t" (B0L 1)) |}];
  Fast_bitvector.Builder.push t false;
  print_s [%message "" (Fast_bitvector.Builder.to_bitvector t : Fast_bitvector.t)];
  [%expect {| ("Fast_bitvector.Builder.to_bitvector t" (B0L 01)) |}];
  for i = 0 to 63 do
    Fast_bitvector.Builder.push t (i mod 2 = 0);
    let bv = Fast_bitvector.Builder.to_bitvector t in
    print_s [%message "" ~len:(Fast_bitvector.length bv : int)
        ~_:(bv : Fast_bitvector.Bit_zero_first.t)];
  done;
  [%expect {|
    ((len 3)
     (B0F 101))
    ((len 4)
     (B0F 1010))
    ((len 5)
     (B0F 10101))
    ((len 6)
     (B0F 101010))
    ((len 7)
     (B0F 1010101))
    ((len 8)
     (B0F 10101010))
    ((len 9)
     (B0F 101010101))
    ((len 10)
     (B0F 1010101010))
    ((len 11)
     (B0F 10101010101))
    ((len 12)
     (B0F 101010101010))
    ((len 13)
     (B0F 1010101010101))
    ((len 14)
     (B0F 10101010101010))
    ((len 15)
     (B0F 101010101010101))
    ((len 16)
     (B0F 1010101010101010))
    ((len 17)
     (B0F 10101010101010101))
    ((len 18)
     (B0F 101010101010101010))
    ((len 19)
     (B0F 1010101010101010101))
    ((len 20)
     (B0F 10101010101010101010))
    ((len 21)
     (B0F 101010101010101010101))
    ((len 22)
     (B0F 1010101010101010101010))
    ((len 23)
     (B0F 10101010101010101010101))
    ((len 24)
     (B0F 101010101010101010101010))
    ((len 25)
     (B0F 1010101010101010101010101))
    ((len 26)
     (B0F 10101010101010101010101010))
    ((len 27)
     (B0F 101010101010101010101010101))
    ((len 28)
     (B0F 1010101010101010101010101010))
    ((len 29)
     (B0F 10101010101010101010101010101))
    ((len 30)
     (B0F 101010101010101010101010101010))
    ((len 31)
     (B0F 1010101010101010101010101010101))
    ((len 32)
     (B0F 10101010101010101010101010101010))
    ((len 33)
     (B0F 101010101010101010101010101010101))
    ((len 34)
     (B0F 1010101010101010101010101010101010))
    ((len 35)
     (B0F 10101010101010101010101010101010101))
    ((len 36)
     (B0F 101010101010101010101010101010101010))
    ((len 37)
     (B0F 1010101010101010101010101010101010101))
    ((len 38)
     (B0F 10101010101010101010101010101010101010))
    ((len 39)
     (B0F 101010101010101010101010101010101010101))
    ((len 40)
     (B0F 1010101010101010101010101010101010101010))
    ((len 41)
     (B0F 10101010101010101010101010101010101010101))
    ((len 42)
     (B0F 101010101010101010101010101010101010101010))
    ((len 43)
     (B0F 1010101010101010101010101010101010101010101))
    ((len 44)
     (B0F 10101010101010101010101010101010101010101010))
    ((len 45)
     (B0F 101010101010101010101010101010101010101010101))
    ((len 46)
     (B0F 1010101010101010101010101010101010101010101010))
    ((len 47)
     (B0F 10101010101010101010101010101010101010101010101))
    ((len 48) (B0F 101010101010101010101010101010101010101010101010))
    ((len 49) (B0F 1010101010101010101010101010101010101010101010101))
    ((len 50) (B0F 10101010101010101010101010101010101010101010101010))
    ((len 51) (B0F 101010101010101010101010101010101010101010101010101))
    ((len 52) (B0F 1010101010101010101010101010101010101010101010101010))
    ((len 53) (B0F 10101010101010101010101010101010101010101010101010101))
    ((len 54) (B0F 101010101010101010101010101010101010101010101010101010))
    ((len 55) (B0F 1010101010101010101010101010101010101010101010101010101))
    ((len 56) (B0F 10101010101010101010101010101010101010101010101010101010))
    ((len 57) (B0F 101010101010101010101010101010101010101010101010101010101))
    ((len 58) (B0F 1010101010101010101010101010101010101010101010101010101010))
    ((len 59) (B0F 10101010101010101010101010101010101010101010101010101010101))
    ((len 60) (B0F 101010101010101010101010101010101010101010101010101010101010))
    ((len 61) (B0F 1010101010101010101010101010101010101010101010101010101010101))
    ((len 62)
     (B0F 10101010101010101010101010101010101010101010101010101010101010))
    ((len 63)
     (B0F 101010101010101010101010101010101010101010101010101010101010101))
    ((len 64)
     (B0F 1010101010101010101010101010101010101010101010101010101010101010))
    ((len 65)
     (B0F 10101010101010101010101010101010101010101010101010101010101010101))
    ((len 66)
     (B0F 101010101010101010101010101010101010101010101010101010101010101010))
    |}]


let%expect_test "Or_int" =
  let t = Fast_bitvector.create ~len:120 in
  for i = 0 to 64 do
    Fast_bitvector.clear_all t;
    Fast_bitvector.With_int.or_ ~result:t t ~bit0_at:i (-1) |> ignore;
    print_s [%message "" ~popcount:(Fast_bitvector.popcount t : int)
        ~_:(t : Fast_bitvector.Bit_zero_first.t)];
    ()
  done;
  [%expect {|
    ((popcount 63)
     (B0F
      111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000))
    ((popcount 63)
     (B0F
      011111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000))
    ((popcount 63)
     (B0F
      001111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000011111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000001111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000011111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000001111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000011111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000001111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000011111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000001111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000011111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000001111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000011111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000001111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000011111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000001111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000011111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000001111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000011111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000011111111111111111111111111111111111111111111111111111111111111100000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111110000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111000000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000000011111111111111111111111111111111111111111111111111111111111111100000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111110000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111000000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111111111111100000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111110000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111000000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111111111111100000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111110000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111000000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111111111111100000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111110000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111000000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111111111111100000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111110000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111000000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111111111111100000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111110000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111000000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111111111111100000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111110000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111000))
    ((popcount 63)
     (B0F
      000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111111111111100))
    ((popcount 63)
     (B0F
      000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111110))
    ((popcount 63)
     (B0F
      000000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111))
    ((popcount 62)
     (B0F
      000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111111111111))
    ((popcount 61)
     (B0F
      000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111))
    ((popcount 60)
     (B0F
      000000000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111111))
    ((popcount 59)
     (B0F
      000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111111111))
    ((popcount 58)
     (B0F
      000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111))
    ((popcount 57)
     (B0F
      000000000000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111))
    ((popcount 56)
     (B0F
      000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111111))
    |}]
